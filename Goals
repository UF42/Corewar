1. Finish with:
    + live (if the process has not been activated -> kil the process);
    - fork (clone the process / processes);
    - zjmp;
    - aff;
    - st;

2. Init all registers to 0 whole process creation;

3. Think over:
    - while (process) { map[process_PC] } process = process->next;
    - process_PC is a process -> id of a player is a color;
    - the command will be executed only on the correspondent process cycle;
    - arguments will be taken on the moment when the waiting ends;
    - when we have unvalid cmd -> we move the process_PC += quantity of bytes and the cycles = 0;
    - erase the processes on a specific event (cycle_to_die);
    - func that returns the waiting for the functions;
    - commands validation;
    - dump (view the map on the stop);
    - N player number;
    - NBR cycle;
    - perror exit;
    - Move the PC for all processes simultaneously
    - Color changes commands;
    - Circle the PC for all of the processes;
    - Cycles to wait (intermidiary iterator);
    - color print func (add according to the process parent) [5 - 8];
    - how to slow down the execution in the terminal;
    â€‹- check regarding 0 - 16 // some weird stuff;
